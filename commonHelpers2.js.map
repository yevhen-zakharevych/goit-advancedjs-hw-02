{"version":3,"file":"commonHelpers2.js","sources":["../src/js/02-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    onSelectDate(selectedDates[0]);\n  },\n};\n\nconst datepicker = flatpickr('#datetime-picker', options);\n\nconst startButton = document.querySelector('[data-start]');\nstartButton.disabled = true;\n\nstartButton.addEventListener('click', () => {\n  startButton.disabled = true;\n  onStart();\n});\n\nconst daysEl = document.querySelector('[data-days]');\nconst hoursEl = document.querySelector('[data-hours]');\nconst minutesEl = document.querySelector('[data-minutes]');\nconst secondsEl = document.querySelector('[data-seconds]');\nlet selectedDate = null;\n\nfunction onSelectDate(selected) {\n  const curDate = new Date();\n\n  if (selected < curDate) {\n    iziToast.error({\n      title: 'Error',\n      message: 'Please choose a date in the future',\n    });\n\n    return;\n  }\n\n  startButton.disabled = false;\n  selectedDate = selected;\n}\n\nfunction onStart() {\n  datepicker.element.disabled = true;\n  const curDate = new Date();\n  let diff = selectedDate - curDate;\n  const convertedData = convertMs(diff);\n  updateTimer(convertedData);\n\n  const intervalId = setInterval(() => {\n    const convertedData = convertMs(diff);\n    updateTimer(convertedData);\n\n    if (diff < 1000) {\n      clearInterval(intervalId);\n    }\n\n    diff -= 1000;\n  }, 1000);\n}\n\nfunction updateTimer({ days, hours, minutes, seconds }) {\n  daysEl.textContent = days;\n  hoursEl.textContent = hours;\n  minutesEl.textContent = minutes;\n  secondsEl.textContent = seconds;\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["options","selectedDates","onSelectDate","datepicker","flatpickr","startButton","onStart","daysEl","hoursEl","minutesEl","secondsEl","selectedDate","selected","iziToast","diff","convertedData","convertMs","updateTimer","intervalId","days","hours","minutes","seconds","ms"],"mappings":"0IAMA,MAAMA,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBC,EAAaD,EAAc,CAAC,CAAC,CAC9B,CACH,EAEME,EAAaC,EAAU,mBAAoBJ,CAAO,EAElDK,EAAc,SAAS,cAAc,cAAc,EACzDA,EAAY,SAAW,GAEvBA,EAAY,iBAAiB,QAAS,IAAM,CAC1CA,EAAY,SAAW,GACvBC,GACF,CAAC,EAED,MAAMC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAY,SAAS,cAAc,gBAAgB,EACzD,IAAIC,EAAe,KAEnB,SAAST,EAAaU,EAAU,CAG9B,GAAIA,EAFY,IAAI,KAEI,CACtBC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACf,CAAK,EAED,MACD,CAEDR,EAAY,SAAW,GACvBM,EAAeC,CACjB,CAEA,SAASN,GAAU,CACjBH,EAAW,QAAQ,SAAW,GAE9B,IAAIW,EAAOH,EADK,IAAI,KAEpB,MAAMI,EAAgBC,EAAUF,CAAI,EACpCG,EAAYF,CAAa,EAEzB,MAAMG,EAAa,YAAY,IAAM,CACnC,MAAMH,EAAgBC,EAAUF,CAAI,EACpCG,EAAYF,CAAa,EAErBD,EAAO,KACT,cAAcI,CAAU,EAG1BJ,GAAQ,GACT,EAAE,GAAI,CACT,CAEA,SAASG,EAAY,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CACtDf,EAAO,YAAcY,EACrBX,EAAQ,YAAcY,EACtBX,EAAU,YAAcY,EACxBX,EAAU,YAAcY,CAC1B,CAEA,SAASN,EAAUO,EAAI,CAQrB,MAAMJ,EAAO,KAAK,MAAMI,EAAK,KAAG,EAE1BH,EAAQ,KAAK,MAAOG,EAAK,MAAO,IAAI,EAEpCF,EAAU,KAAK,MAAQE,EAAK,MAAO,KAAQ,GAAM,EAEjDD,EAAU,KAAK,MAASC,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAJ,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}